<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="1">
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Pomodoro}-->
  <class name="Pomodoro" superclass="qpc::QActive">
   <!--${AOs::Pomodoro::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00">
    <documentation>When a timer has elapsed</documentation>
   </attribute>
   <!--${AOs::Pomodoro::SM}-->
   <statechart properties="0x01">
    <!--${AOs::Pomodoro::SM::initial}-->
    <initial target="../1">
     <action brief="arm time event">QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC/2,
              BSP_TICKS_PER_SEC/2);
(void)par; /* unused parameter */</action>
     <initial_glyph conn="2,6,5,0,5,4">
      <action box="0,-2,13,3"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Pomodoro::SM::show_stats}-->
    <state name="show_stats">
     <documentation>Show the current count of the number of pomodoros</documentation>
     <!--${AOs::Pomodoro::SM::show_stats::ORIENT_LB}-->
     <tran trig="ORIENT_LB" target="../../2/2">
      <tran_glyph conn="16,15,1,3,31">
       <action box="1,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Pomodoro::SM::show_stats::ORIENT_SB}-->
     <tran trig="ORIENT_SB" target="../../2/1">
      <tran_glyph conn="11,23,2,3,4,36">
       <action box="6,2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Pomodoro::SM::show_stats::ORIENT_P}-->
     <tran trig="ORIENT_P" target="../../2/3">
      <tran_glyph conn="8,23,2,3,16,39">
       <action box="9,14,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,10,13,13"/>
    </state>
    <!--${AOs::Pomodoro::SM::timing}-->
    <state name="timing">
     <exit brief="stop timer">BSP_stopTimer();</exit>
     <!--${AOs::Pomodoro::SM::timing::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="37,8,3,0,-26,2">
       <action box="-20,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Pomodoro::SM::timing::short_break}-->
     <state name="short_break">
      <state_glyph node="47,22,12,12"/>
     </state>
     <!--${AOs::Pomodoro::SM::timing::long_break}-->
     <state name="long_break">
      <state_glyph node="47,8,12,12"/>
     </state>
     <!--${AOs::Pomodoro::SM::timing::pomodoro}-->
     <state name="pomodoro">
      <!--${AOs::Pomodoro::SM::timing::pomodoro::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../../1">
       <action>num_poms++;</action>
       <tran_glyph conn="47,45,3,2,-42,-22">
        <action box="-30,-4,17,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="47,36,12,12"/>
     </state>
     <state_glyph node="37,1,31,51">
      <exit box="1,2,14,4"/>
     </state_glyph>
    </state>
    <state_diagram size="76,56"/>
   </statechart>
  </class>
  <!--${AOs::num_poms}-->
  <attribute name="num_poms" type="uint32_t" visibility="0x02" properties="0x00">
   <documentation>Number of pomodoros</documentation>
   <code>= 0;</code>
  </attribute>
  <!--${AOs::Pomodoro_ctor}-->
  <operation name="Pomodoro_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Pomodoro &quot;constructor&quot; is provided outside of the Pomodoro class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Pomodoro *me = (Pomodoro *)AO_Pomodoro;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Pomodoro_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::pomodoro.c}-->
  <file name="pomodoro.c">
   <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

/* ask QM to declare the Pomodoro class ------------------------------------*/
$declare${AOs::Pomodoro}

/* instantiate the Pomodoro active object ----------------------------------*/
static Pomodoro l_pomodoro;
QActive * const AO_Pomodoro = &amp;l_pomodoro.super;

/* ask QM to define the Pomodoro class -------------------------------------*/
$define${AOs::num_poms}
$define${AOs::Pomodoro_ctor}
$define${AOs::Pomodoro}</text>
  </file>
  <!--${.::bsp.h}-->
  <file name="bsp.h">
   <text>#ifndef BSP_H
#define BSP_H

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { BSP_TICKS_PER_SEC = 100 }; /* number of clock ticks in a second */
void BSP_init(void);
void BSP_stopTimer(void);
void BSP_incrementPomodoro(void);

/* define the event signals used in the application ------------------------*/
enum PomodoroSignals {
    TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    ORIENT_LB_SIG,
    ORIENT_SB_SIG,
    ORIENT_P_SIG,
    MAX_SIG /* keep last (the number of signals) */
};

/* active object(s) used in this application -------------------------------*/
extern QActive * const AO_Pomodoro; /* opaque pointer to the Pomodoro AO */
$declare${AOs::Pomodoro_ctor}

#endif /* BSP_H */
</text>
  </file>
  <!--${.::bsp.c}-->
  <file name="bsp.c">
   <text>/* Board Support Package implementation for desktop OS (Windows, Linux, MacOS) */
#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &lt;stdio.h&gt;  /* for printf()/fprintf() */
#include &lt;stdlib.h&gt; /* for exit() */

void BSP_init(void)   {
    printf(&quot;Simple Pomodoro example\n&quot;
           &quot;QP/C version: %s\n&quot;
           &quot;Press Ctrl-C to quit...\n&quot;,
           QP_VERSION_STR);
}

void BSP_stopTimer(void) {}

void BSP_incrementPomodoro(void) {}

/* callback functions needed by the framework ------------------------------*/
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void QF_onClockTick(void) {
    QF_TICK_X(0U, (void *)0); /* QF clock tick processing for rate 0 */
}
void Q_onAssert(char const * const module, int loc) {
    fprintf(stderr, &quot;Assertion failed in %s:%d&quot;, module, loc);
    exit(-1);
}
</text>
  </file>
  <!--${.::Makefile}-->
  <file name="Makefile">
   <text># Makefile for building QP/C application on Windows and POSIX hosts
#
# examples of invoking this Makefile:
# building configurations: Debug (default), Release, and Spy
# make
# make CONF=rel
# make CONF=spy
# make clean   # cleanup the build
# make CONF=spy clean   # cleanup the build
#
# NOTE:
# To use this Makefile on Windows, you will need the GNU make utility, which
# is included in the QTools collection for Windows, see:
#    https://sourceforge.net/projects/qpc/files/QTools/
#

#-----------------------------------------------------------------------------
# project name:
#
PROJECT := pomodoro

#-----------------------------------------------------------------------------
# project directories:
#

# Base of project
ROOT := $(HOME)/pomodoro-timer

# list of all source directories used by this project
VPATH := . \

# list of all include directories needed by this project
INCLUDES := -I. \
    -I$(ROOT)/Core/Inc \
    -I$(ROOT)/Drivers/STM32L4xx_HAL_Driver/Inc \
    -I$(ROOT)/Drivers/CMSIS/Device/ST/STM32L4xx/Include \
    -I$(ROOT)/Drivers/BSP/B-L475E-IOT01

# location of the QP/C framework (if not provided in an env. variable)
ifeq ($(QPC),)
QPC := ../../..
endif

#-----------------------------------------------------------------------------
# project files:
#

# C source files...
C_SRCS := \
    pomodoro.c \
    bsp.c \
    main.c

# C++ source files...
CPP_SRCS :=

LIB_DIRS  :=
LIBS      :=

# defines...
# QP_API_VERSION controls the QP API compatibility; 9999 means the latest API
DEFINES   := -DQP_API_VERSION=9999

ifeq (,$(CONF))
    CONF := dbg
endif

#-----------------------------------------------------------------------------
# add QP/C framework (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)

# NOTE:
# For Windows hosts, you can choose:
# - the single-threaded QP/C port (win32-qv) or
# - the multithreaded QP/C port (win32).
#
QP_PORT_DIR := $(QPC)/ports/win32-qv
#QP_PORT_DIR := $(QPC)/ports/win32
LIB_DIRS += -L$(QP_PORT_DIR)/$(CONF)
LIBS     += -lqp -lws2_32

else

# NOTE:
# For POSIX hosts (Linux, MacOS), you can choose:
# - the single-threaded QP/C port (win32-qv) or
# - the multithreaded QP/C port (win32).
#
QP_PORT_DIR := $(QPC)/ports/arm-cm/qk/gnu
#QP_PORT_DIR := $(QPC)/ports/posix

C_SRCS += \
    qep_hsm.c \
    qep_msm.c \
    qf_act.c \
    qf_actq.c \
    qf_defer.c \
    qf_dyn.c \
    qf_mem.c \
    qf_ps.c \
    qf_qact.c \
    qf_qeq.c \
    qf_qmact.c \
    qf_time.c \
    qf_port.c

QS_SRCS := \
    qs.c \
    qs_64bit.c \
    qs_rx.c \
    qs_fp.c \
    qs_port.c

LIBS += -lpthread

endif

#============================================================================
# Typically you should not need to change anything below this line

VPATH    += $(QPC)/src/qf $(QP_PORT_DIR)
INCLUDES += -I$(QPC)/include -I$(QPC)/src -I$(QP_PORT_DIR)

#-----------------------------------------------------------------------------
# GNU toolset:
#
# NOTE:
# GNU toolset (MinGW) is included in the QTools collection for Windows, see:
#     http://sourceforge.net/projects/qpc/files/QTools/
# It is assumed that %QTOOLS%\bin directory is added to the PATH
#
CC    := arm-none-eabi-gcc
CPP   := arm-none-eabi-g++
LINK  := arm-none-eabi-gcc # for C programs
#LINK  := g++   # for C++ programs

#-----------------------------------------------------------------------------
# basic utilities (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)
    MKDIR      := mkdir
    RM         := rm
    TARGET_EXT := .exe
else ifeq ($(OSTYPE),cygwin)
    MKDIR      := mkdir -p
    RM         := rm -f
    TARGET_EXT := .exe
else
    MKDIR      := mkdir -p
    RM         := rm -f
    TARGET_EXT :=
endif

#-----------------------------------------------------------------------------
# build configurations...

ifeq (rel, $(CONF)) # Release configuration ..................................

BIN_DIR := build_rel
# gcc options:
CFLAGS  = -c -O3 -std=c11 -pedantic -Wall -Wextra -W -Wno-c11-extensions \
    $(INCLUDES) $(DEFINES) -DNDEBUG

CPPFLAGS = -c -O3 -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DNDEBUG

else ifeq (spy, $(CONF))  # Spy configuration ................................

BIN_DIR := build_spy

C_SRCS   += $(QS_SRCS)
VPATH    += $(QPC)/src/qs

# gcc options:
CFLAGS  = -c -g -O -std=c11 -pedantic -Wall -Wextra -W -Wno-c11-extensions \
    $(INCLUDES) $(DEFINES) -DQ_SPY

CPPFLAGS = -c -g -O -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DQ_SPY

else # default Debug configuration .........................................

BIN_DIR := build

# gcc options:
CFLAGS  = -c -g -O -std=c11 -pedantic -Wall -Wextra -W -Wno-c11-extensions \
    -mcpu=cortex-m4 -ffunction-sections -fdata-sections -fstack-usage \
    -mfpu=fpv4-sp-d16 -mfloat-abi=hard -mthumb --specs=nano.specs \
    $(INCLUDES) $(DEFINES)

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES)

endif  # .....................................................................

# LINKFLAGS := -no-pie

#-----------------------------------------------------------------------------
C_OBJS       := $(patsubst %.c,%.o,   $(C_SRCS))
CPP_OBJS     := $(patsubst %.cpp,%.o, $(CPP_SRCS))

TARGET_EXE   := $(BIN_DIR)/$(PROJECT)$(TARGET_EXT)
C_OBJS_EXT   := $(addprefix $(BIN_DIR)/, $(C_OBJS))
C_DEPS_EXT   := $(patsubst %.o,%.d, $(C_OBJS_EXT))
CPP_OBJS_EXT := $(addprefix $(BIN_DIR)/, $(CPP_OBJS))
CPP_DEPS_EXT := $(patsubst %.o,%.d, $(CPP_OBJS_EXT))

# create $(BIN_DIR) if it does not exist
ifeq (&quot;$(wildcard $(BIN_DIR))&quot;,&quot;&quot;)
$(shell $(MKDIR) $(BIN_DIR))
endif

#-----------------------------------------------------------------------------
# rules
#

all: $(TARGET_EXE)

$(TARGET_EXE) : $(C_OBJS_EXT) $(CPP_OBJS_EXT)
    $(CC) $(CFLAGS) $(QPC)/include/qstamp.c -o $(BIN_DIR)/qstamp.o
    $(LINK) $(LINKFLAGS) $(LIB_DIRS) -o $@ $^ $(BIN_DIR)/qstamp.o $(LIBS)

$(BIN_DIR)/%.d : %.c
    $(CC) -MM -MT $(@:.d=.o) $(CFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.d : %.cpp
    $(CPP) -MM -MT $(@:.d=.o) $(CPPFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.o : %.c
    $(CC) $(CFLAGS) $&lt; -o $@

$(BIN_DIR)/%.o : %.cpp
    $(CPP) $(CPPFLAGS) $&lt; -o $@

.PHONY : clean show

# include dependency files only if our goal depends on their existence
ifneq ($(MAKECMDGOALS),clean)
  ifneq ($(MAKECMDGOALS),show)
-include $(C_DEPS_EXT) $(CPP_DEPS_EXT)
  endif
endif

.PHONY : clean show

clean :
    -$(RM) $(BIN_DIR)/*.o \
    $(BIN_DIR)/*.d \
    $(TARGET_EXE)

show :
    @echo PROJECT      = $(PROJECT)
    @echo TARGET_EXE   = $(TARGET_EXE)
    @echo VPATH        = $(VPATH)
    @echo C_SRCS       = $(C_SRCS)
    @echo CPP_SRCS     = $(CPP_SRCS)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo C_OBJS_EXT   = $(C_OBJS_EXT)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo CPP_DEPS_EXT = $(CPP_DEPS_EXT)
    @echo CPP_OBJS_EXT = $(CPP_OBJS_EXT)
    @echo LIB_DIRS     = $(LIB_DIRS)
    @echo LIBS         = $(LIBS)
    @echo DEFINES      = $(DEFINES)

</text>
  </file>
  <!--${.::main.c}-->
  <file name="main.c">
   <text>/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include &quot;main.h&quot;
#include &quot;i2c.h&quot;
#include &quot;spi.h&quot;
#include &quot;tim.h&quot;
#include &quot;usart.h&quot;
#include &quot;gpio.h&quot;

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include &quot;stm32l475e_iot01_accelero.h&quot;
#include &quot;draw.h&quot;
#include &quot;pcd8544.h&quot;

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

//#define DEBUG_OUTPUT

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
extern TIM_HandleTypeDef htim2;             // Timer 2 handle
extern UART_HandleTypeDef huart4;           // UART 4 handle

static volatile state_t State;              // initial state is START
static volatile uint8_t num_pomodoros;      // current number of pomodoros
static volatile uint32_t ticks_remaining;   // how long until timer elapses
static bool pomodoro_started;               // Keep track of poms
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int16_t pDataXYZ[3]; // accelerometer data
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  const char msg[]         = &quot;Pomodoros:&quot;;
  const char pom_lbl[]     = &quot;POMODORO&quot;;
  const char sbreak_lbl[]  = &quot;S. BREAK&quot;;
  const char lbreak_lbl[]  = &quot;L. BREAK&quot;;
  const char elapsed_lbl[] = &quot;DONE!&quot;;

  num_pomodoros = 0;                // Set initial pomodoro count
  state_t orientation_state;        // The current timing/orientation state

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_I2C2_Init();
  MX_UART4_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
  LCD_begin(&amp;hspi1, GPIOA, LCD_DC_Pin, LCD_RESET_Pin, 40, 0x04);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  State = START;
  while (1) {
      switch(State) {
      case START:                               // (also used as reSTART)
          pomodoro_started = false;             // clear pomodoro flag (if any)
          ticks_remaining = 0;                  // cancel any remaining time
          State = SHOW_STATS;
          break;
      case SHOW_STATS:
          LCD_clearDisplay();                   // clear display
          draw_string(0, 0, msg, sizeof(msg));  // &quot;Pomodoros:&quot;
          draw_number(0, 8, num_pomodoros);     // NUM
          LCD_display();                        // write to display
          State = WAIT;
          HAL_Delay(1000);                      // Hold for accel to settle
          break;
      case WAIT:
          BSP_ACCELERO_AccGetXYZ(pDataXYZ);     // read accelerometer
          orientation_state = get_orientation(pDataXYZ);
          State = orientation_state;
          break;
      case POMODORO:
          ticks_remaining = 1500;               // set timer for 25 minutes
          pomodoro_started = true;
          LCD_clearDisplay();
          draw_string(0, 0, pom_lbl, sizeof(pom_lbl));
          HAL_TIM_Base_MspInit(&amp;htim2);         // enable timer interrupt
          State = TIMING;
          break;
      case LONG_BREAK:
          ticks_remaining = 900;                // set timer for 15 minutes
          LCD_clearDisplay();
          draw_string(0, 0, lbreak_lbl, sizeof(lbreak_lbl));
          HAL_TIM_Base_MspInit(&amp;htim2);         // enable timer interrupt
          State = TIMING;
          break;
      case SHORT_BREAK:
          ticks_remaining = 300;                // set timer for 5 minutes
          LCD_clearDisplay();
          draw_string(0, 0, sbreak_lbl, sizeof(sbreak_lbl));
          HAL_TIM_Base_MspInit(&amp;htim2);         // enable timer interrupt
          State = TIMING;
          break;
      case TIMING:
          draw_clear_rect(0, 24, LCDWIDTH, 8);
          draw_time(0, 24, ticks_remaining);
          LCD_display();
          break;
      case ELAPSED:
          HAL_TIM_Base_MspDeInit(&amp;htim2);       // disable timer interrupt
          if (pomodoro_started) {               // if we finished a pomodoro
              num_pomodoros++;                  // Increment statistics
              pomodoro_started = false;         // no longer in a pomodoro
          }
          LCD_clearDisplay();
          draw_string(0, 0, elapsed_lbl, sizeof(elapsed_lbl));
          LCD_display();
          State = RESETTING;
          break;
      case RESETTING:
          BSP_ACCELERO_AccGetXYZ(pDataXYZ);
          if (get_orientation(pDataXYZ) == WAIT) { // stay here until timer is
              State = SHOW_STATS;                  //   re-oriented, show counts
          }
          break;
      default:
          // Something has gone wrong
          Error_Handler();
      }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/*******************************************************************************
 * Application-level tick callback. This should be about 1 actual second. Each
 * time we get here we should decide if a pomodoro counter has elapsed or else
 * continue to tick down.
 ******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (ticks_remaining == 0) {
        State = ELAPSED;
    } else {
        ticks_remaining--;
    }
}

/*******************************************************************************
 * This callback is triggered when the blue USER button is pressed. We abort the
 * currently-timing session and revert back to an initial mode with all
 * setttings at initial values.
 ******************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    if (GPIO_Pin == USER_BUTTON)
        State = START;
}

/*******************************************************************************
 * Determine orientation for the board based on the current accelerometer
 * reading. Note that positive Z is &quot;down&quot; as viewed from the front/face.
 ┌─────────────┐
 │     +X      │
 │      ▲      │
 │      │      │
 │      │      │
 │+Y◀───◎      │
 │     +Z      │
 │ (into page) │
 │          ┌──┴──┐
 │          │ USB │
 │          └──┬──┘
 └─────────────┘
 The value returned is in mg, (i.e. 1/1000 of g). Full-scale is about 1,000 on
 any axis. This function returns one of the timing states to transition to or
 else to wait.
*******************************************************************************/
state_t get_orientation(int16_t *pDataXYZ) {
    int16_t x = pDataXYZ[0];
    int16_t y = pDataXYZ[1];
    int16_t z = pDataXYZ[2];
#ifdef DEBUG_OUTPUT
    uint8_t buff[20];
#endif
    if (x &lt; -800 &amp;&amp; abs(y) &lt; 100 &amp;&amp; abs(z) &lt; 100) { // (all neg X direction)
#ifdef DEBUG_OUTPUT
        sprintf((char *)buff, &quot;x=%i\n&quot;, x);
        HAL_UART_Transmit_IT(&amp;huart4, buff, strlen((char *)buff));
#endif
        return POMODORO;
    }
    if (y &gt; 800 &amp;&amp; x &gt; 450 &amp;&amp; abs(z) &lt; 100) {       // y&gt;1000*cos(30), x&gt;1000*sin(30)
#ifdef DEBUG_OUTPUT
        sprintf((char *)buff, &quot;x=%i, y=%i\n&quot;, x, y);
        HAL_UART_Transmit_IT(&amp;huart4, buff, strlen((char *)buff));
#endif
        return LONG_BREAK;
    }
    if (y &lt; -800 &amp;&amp; x &gt; 450 &amp;&amp; abs(z) &lt; 100) {      // (^^ reflected over x-axis)
#ifdef DEBUG_OUTPUT
        sprintf((char *)buff, &quot;x=%i, y=%i\n&quot;, x, y);
        HAL_UART_Transmit_IT(&amp;huart4, buff, strlen((char *)buff));
#endif
        return SHORT_BREAK;
    }
    // In positive z direction, or indeterminate
    return WAIT;
}

// #include &quot;qpc.h&quot;    /* QP/C framework API */
// #include &quot;bsp.h&quot;    /* Board Support Package interface */
//
// Q_DEFINE_THIS_FILE
//
// /* the main function -------------------------------------------------------*/
// int main() {
//     static QEvt const *pomodoro_queueSto[10]; /* event queue buffer for Pomodoro */
//
//     QF_init();  /* initialize the framework */
//     BSP_init(); /* initialize the BSP */
//
//     /* instantiate and start the Pomodoro active object */
//     Pomodoro_ctor();              /* in C you must explicitly call the Pomodoro constructor */
//     QACTIVE_START(AO_Pomodoro,    /* active object to start */
//         1U,                       /* priority of the active object */
//         pomodoro_queueSto,        /* event queue buffer */
//         Q_DIM(pomodoro_queueSto), /* the length of the buffer */
//         (void *)0, 0U,            /* private stack (not used) */
//         (QEvt *)0);               /* initialization event (not used) */
//
//     return QF_run();              /* let the framework run the application */
// }

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1) {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line
     number,
     ex: printf(&quot;Wrong parameters value: file %s on line %d\r\n&quot;, file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
</text>
  </file>
 </directory>
</model>
