<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="1">
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Pomodoro}-->
  <class name="Pomodoro" superclass="qpc::QActive">
   <!--${AOs::Pomodoro::timetEvt}-->
   <attribute name="timetEvt" type="QTimeEvt" visibility="0x02" properties="0x00">
    <documentation>When a timer has elapsed</documentation>
   </attribute>
   <!--${AOs::Pomodoro::SM}-->
   <statechart properties="0x01">
    <!--${AOs::Pomodoro::SM::initial}-->
    <initial target="../1">
     <action brief="arm time event">QTimeEvt_arm(&amp;me-&gt;timetEvt, BSP_TICKS_PER_SEC/2,
             BSP_TICKS_PER_SEC/2);</action>
     <initial_glyph conn="2,6,5,0,5,4">
      <action box="0,-4,13,3"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Pomodoro::SM::show_stats}-->
    <state name="show_stats">
     <documentation>Show the current count of the number of pomodoros</documentation>
     <!--${AOs::Pomodoro::SM::show_stats::ORIENT_LB}-->
     <tran trig="ORIENT_LB" target="../../2/2">
      <tran_glyph conn="16,21,1,3,14,-8,17">
       <action box="1,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Pomodoro::SM::show_stats::ORIENT_SB}-->
     <tran trig="ORIENT_SB" target="../../2/1">
      <tran_glyph conn="11,23,2,3,4,36">
       <action box="6,2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Pomodoro::SM::show_stats::ORIENT_P}-->
     <tran trig="ORIENT_P" target="../../2/3">
      <tran_glyph conn="8,23,2,3,19,39">
       <action box="9,17,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,10,13,13"/>
    </state>
    <!--${AOs::Pomodoro::SM::timing}-->
    <state name="timing">
     <!--${AOs::Pomodoro::SM::timing::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="37,8,3,0,-24,2">
       <action box="-14,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Pomodoro::SM::timing::short_break}-->
     <state name="short_break">
      <state_glyph node="47,22,12,12"/>
     </state>
     <!--${AOs::Pomodoro::SM::timing::long_break}-->
     <state name="long_break">
      <state_glyph node="47,8,12,12"/>
     </state>
     <!--${AOs::Pomodoro::SM::timing::pomodoro}-->
     <state name="pomodoro">
      <state_glyph node="47,36,12,12"/>
     </state>
     <state_glyph node="37,3,31,47"/>
    </state>
    <state_diagram size="76,56"/>
   </statechart>
  </class>
  <!--${AOs::Pomodoro_ctor}-->
  <operation name="Pomodoro_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Pomodoro &quot;constructor&quot; is provided outside of the Pomodoro class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Pomodoro *me = (Pomodoro *)AO_Pomodoro;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Pomodoro_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::pomodoro.c}-->
  <file name="pomodoro.c">
   <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

/* ask QM to declare the Pomodoro class ------------------------------------*/
$declare${AOs::Pomodoro}

/* instantiate the Pomodoro active object ----------------------------------*/
static Pomodoro l_pomodoro;
QActive * const AO_Pomodoro = &amp;l_pomodoro.super;

/* ask QM to define the Pomodoro class -------------------------------------*/
$define${AOs::Pomodoro_ctor}
$define${AOs::Pomodoro}</text>
  </file>
  <!--${.::bsp.h}-->
  <file name="bsp.h">
   <text>#ifndef BSP_H
#define BSP_H

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { BSP_TICKS_PER_SEC = 100 }; /* number of clock ticks in a second */
void BSP_init(void);

/* define the event signals used in the application ------------------------*/
enum PomodoroSignals {
    TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    MAX_SIG /* keep last (the number of signals) */
};

/* active object(s) used in this application -------------------------------*/
extern QActive * const AO_Pomodoro; /* opaque pointer to the Pomodoro AO */
$declare${AOs::Pomodoro_ctor}

#endif /* BSP_H */</text>
  </file>
  <!--${.::bsp.c}-->
  <file name="bsp.c">
   <text>/* Board Support Package implementation for desktop OS (Windows, Linux, MacOS) */
#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &lt;stdio.h&gt;  /* for printf()/fprintf() */
#include &lt;stdlib.h&gt; /* for exit() */

void BSP_init(void)   {
    printf(&quot;Simple Pomodoro example\n&quot;
           &quot;QP/C version: %s\n&quot;
           &quot;Press Ctrl-C to quit...\n&quot;,
           QP_VERSION_STR);
}

/* callback functions needed by the framework ------------------------------*/
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void QF_onClockTick(void) {
    QF_TICK_X(0U, (void *)0); /* QF clock tick processing for rate 0 */
}
void Q_onAssert(char const * const module, int loc) {
    fprintf(stderr, &quot;Assertion failed in %s:%d&quot;, module, loc);
    exit(-1);
}</text>
  </file>
  <!--${.::main.c}-->
  <file name="main.c">
   <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

Q_DEFINE_THIS_FILE

/* the main function -------------------------------------------------------*/
int main() {
    static QEvt const *pomodoro_queueSto[10]; /* event queue buffer for Pomodoro */

    QF_init();  /* initialize the framework */
    BSP_init(); /* initialize the BSP */

    /* instantiate and start the Pomodoro active object */
    Pomodoro_ctor();              /* in C you must explicitly call the Pomodoro constructor */
    QACTIVE_START(AO_Pomodoro,    /* active object to start */
        1U,                       /* priority of the active object */
        pomodoro_queueSto,        /* event queue buffer */
        Q_DIM(pomodoro_queueSto), /* the length of the buffer */
        (void *)0, 0U,            /* private stack (not used) */
        (QEvt *)0);               /* initialization event (not used) */

    return QF_run();              /* let the framework run the application */
}</text>
  </file>
  <!--${.::Makefile}-->
  <file name="Makefile">
   <text># Makefile for building QP/C application on Windows and POSIX hosts
#
# examples of invoking this Makefile:
# building configurations: Debug (default), Release, and Spy
# make
# make CONF=rel
# make CONF=spy
# make clean   # cleanup the build
# make CONF=spy clean   # cleanup the build
#
# NOTE:
# To use this Makefile on Windows, you will need the GNU make utility, which
# is included in the QTools collection for Windows, see:
#    https://sourceforge.net/projects/qpc/files/QTools/
#

#-----------------------------------------------------------------------------
# project name:
#
PROJECT := pomodoro

#-----------------------------------------------------------------------------
# project directories:
#

# list of all source directories used by this project
VPATH := . \

# list of all include directories needed by this project
INCLUDES := -I. \

# location of the QP/C framework (if not provided in an env. variable)
ifeq ($(QPC),)
QPC := ../../..
endif

#-----------------------------------------------------------------------------
# project files:
#

# C source files...
C_SRCS := \
    pomodoro.c \
    bsp.c \
    main.c

# C++ source files...
CPP_SRCS :=

LIB_DIRS  :=
LIBS      :=

# defines...
# QP_API_VERSION controls the QP API compatibility; 9999 means the latest API
DEFINES   := -DQP_API_VERSION=9999

ifeq (,$(CONF))
    CONF := dbg
endif

#-----------------------------------------------------------------------------
# add QP/C framework (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)

# NOTE:
# For Windows hosts, you can choose:
# - the single-threaded QP/C port (win32-qv) or
# - the multithreaded QP/C port (win32).
#
QP_PORT_DIR := $(QPC)/ports/win32-qv
#QP_PORT_DIR := $(QPC)/ports/win32
LIB_DIRS += -L$(QP_PORT_DIR)/$(CONF)
LIBS     += -lqp -lws2_32

else

# NOTE:
# For POSIX hosts (Linux, MacOS), you can choose:
# - the single-threaded QP/C port (win32-qv) or
# - the multithreaded QP/C port (win32).
#
QP_PORT_DIR := $(QPC)/ports/posix-qv
#QP_PORT_DIR := $(QPC)/ports/posix

C_SRCS += \
    qep_hsm.c \
    qep_msm.c \
    qf_act.c \
    qf_actq.c \
    qf_defer.c \
    qf_dyn.c \
    qf_mem.c \
    qf_ps.c \
    qf_qact.c \
    qf_qeq.c \
    qf_qmact.c \
    qf_time.c \
    qf_port.c

QS_SRCS := \
    qs.c \
    qs_64bit.c \
    qs_rx.c \
    qs_fp.c \
    qs_port.c

LIBS += -lpthread

endif

#============================================================================
# Typically you should not need to change anything below this line

VPATH    += $(QPC)/src/qf $(QP_PORT_DIR)
INCLUDES += -I$(QPC)/include -I$(QPC)/src -I$(QP_PORT_DIR)

#-----------------------------------------------------------------------------
# GNU toolset:
#
# NOTE:
# GNU toolset (MinGW) is included in the QTools collection for Windows, see:
#     http://sourceforge.net/projects/qpc/files/QTools/
# It is assumed that %QTOOLS%\bin directory is added to the PATH
#
CC    := gcc
CPP   := g++
LINK  := gcc    # for C programs
#LINK  := g++   # for C++ programs

#-----------------------------------------------------------------------------
# basic utilities (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)
    MKDIR      := mkdir
    RM         := rm
    TARGET_EXT := .exe
else ifeq ($(OSTYPE),cygwin)
    MKDIR      := mkdir -p
    RM         := rm -f
    TARGET_EXT := .exe
else
    MKDIR      := mkdir -p
    RM         := rm -f
    TARGET_EXT :=
endif

#-----------------------------------------------------------------------------
# build configurations...

ifeq (rel, $(CONF)) # Release configuration ..................................

BIN_DIR := build_rel
# gcc options:
CFLAGS  = -c -O3 -fno-pie -std=c99 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DNDEBUG

CPPFLAGS = -c -O3 -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DNDEBUG

else ifeq (spy, $(CONF))  # Spy configuration ................................

BIN_DIR := build_spy

C_SRCS   += $(QS_SRCS)
VPATH    += $(QPC)/src/qs

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c99 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DQ_SPY

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DQ_SPY

else # default Debug configuration .........................................

BIN_DIR := build

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c99 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES)

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES)

endif  # .....................................................................

LINKFLAGS := -no-pie

#-----------------------------------------------------------------------------
C_OBJS       := $(patsubst %.c,%.o,   $(C_SRCS))
CPP_OBJS     := $(patsubst %.cpp,%.o, $(CPP_SRCS))

TARGET_EXE   := $(BIN_DIR)/$(PROJECT)$(TARGET_EXT)
C_OBJS_EXT   := $(addprefix $(BIN_DIR)/, $(C_OBJS))
C_DEPS_EXT   := $(patsubst %.o,%.d, $(C_OBJS_EXT))
CPP_OBJS_EXT := $(addprefix $(BIN_DIR)/, $(CPP_OBJS))
CPP_DEPS_EXT := $(patsubst %.o,%.d, $(CPP_OBJS_EXT))

# create $(BIN_DIR) if it does not exist
ifeq (&quot;$(wildcard $(BIN_DIR))&quot;,&quot;&quot;)
$(shell $(MKDIR) $(BIN_DIR))
endif

#-----------------------------------------------------------------------------
# rules
#

all: $(TARGET_EXE)

$(TARGET_EXE) : $(C_OBJS_EXT) $(CPP_OBJS_EXT)
    $(CC) $(CFLAGS) $(QPC)/include/qstamp.c -o $(BIN_DIR)/qstamp.o
    $(LINK) $(LINKFLAGS) $(LIB_DIRS) -o $@ $^ $(BIN_DIR)/qstamp.o $(LIBS)

$(BIN_DIR)/%.d : %.c
    $(CC) -MM -MT $(@:.d=.o) $(CFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.d : %.cpp
    $(CPP) -MM -MT $(@:.d=.o) $(CPPFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.o : %.c
    $(CC) $(CFLAGS) $&lt; -o $@

$(BIN_DIR)/%.o : %.cpp
    $(CPP) $(CPPFLAGS) $&lt; -o $@

.PHONY : clean show

# include dependency files only if our goal depends on their existence
ifneq ($(MAKECMDGOALS),clean)
  ifneq ($(MAKECMDGOALS),show)
-include $(C_DEPS_EXT) $(CPP_DEPS_EXT)
  endif
endif

.PHONY : clean show

clean :
    -$(RM) $(BIN_DIR)/*.o \
    $(BIN_DIR)/*.d \
    $(TARGET_EXE)

show :
    @echo PROJECT      = $(PROJECT)
    @echo TARGET_EXE   = $(TARGET_EXE)
    @echo VPATH        = $(VPATH)
    @echo C_SRCS       = $(C_SRCS)
    @echo CPP_SRCS     = $(CPP_SRCS)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo C_OBJS_EXT   = $(C_OBJS_EXT)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo CPP_DEPS_EXT = $(CPP_DEPS_EXT)
    @echo CPP_OBJS_EXT = $(CPP_OBJS_EXT)
    @echo LIB_DIRS     = $(LIB_DIRS)
    @echo LIBS         = $(LIBS)
    @echo DEFINES      = $(DEFINES)

</text>
  </file>
 </directory>
</model>
